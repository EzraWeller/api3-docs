(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{481:function(t,e,a){t.exports=a.p+"assets/img/airnode-is-2-parts.2bdf6f50.png"},574:function(t,e,a){"use strict";a.r(e);var o=a(8),s=Object(o.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"frontmatter-title"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),o("TocHeader"),t._v(" "),o("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,3]}}),t._v(" "),o("p",[t._v("Airnode is composed of two parts: the "),o("strong",[t._v("AirnodeRrp.sol")]),t._v(" (on-chain protocol contract) and the "),o("strong",[t._v("Airnode Application")]),t._v(" (cloud provider functions, e.g., AWS). API3 has deployed the AirnodeRrp.sol protocol contract to several EVM-compatible blockchains. An API provider deploys an Airnode application to a cloud provider which can communicate with one or more AirnodeRrp.sol protocol contracts on different blockchains.")]),t._v(" "),o("blockquote",[o("p",[o("img",{attrs:{src:a(481),alt:"2-parts"}})])]),t._v(" "),o("h2",{attrs:{id:"is-my-platform-compatible"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#is-my-platform-compatible"}},[t._v("#")]),t._v(" Is my platform compatible?")]),t._v(" "),o("p",[t._v("The table below shows a list of EVM compatible blockchains (smart contract platforms) that API3 has deployed the "),o("em",[t._v("AirnodeRrp.sol protocol contract")]),t._v(" on. An "),o("em",[t._v("Airnode application")]),t._v(" can see the "),o("em",[t._v("protocol contract")]),t._v(" using its contract ID.")]),t._v(" "),o("ChainsSupported",{attrs:{version:"0.1.0"}}),t._v(" "),o("p",[t._v("This does not mean only these chains can be used. If you are using a smart contract platform that does not have the "),o("em",[t._v("AirnodeRrp.sol protocol contract")]),t._v(" deployed by API3 you could add it yourself. API3 has received requests by teams of smart contract platforms and decentralized applications built on them to integrate Airnode and thus gaining access to API data and services. A lot of the smart contract platforms are directly compatible with Airnode, meaning that the integration effort will be trivial and can even be done with minimal support from API3.")]),t._v(" "),o("p",[t._v('This document enables you to "self-serve" and assess the feasibility of an integration, and even prototype the integration yourself.')]),t._v(" "),o("h2",{attrs:{id:"evm-support"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#evm-support"}},[t._v("#")]),t._v(" EVM Support")]),t._v(" "),o("p",[t._v("Let's go over different factors that determine compatibility. Airnode is composed of two parts: the "),o("em",[t._v("AirnodeRrp.sol protocol contract")]),t._v(" and the "),o("em",[t._v("Airnode application")]),t._v(". The protocol contract is implemented in Solidity.")]),t._v(" "),o("p",[t._v("Solidity typically compiles to EVM bytecode, which means that your smart contract platform should be EVM-compatible. In theory, you can also compile Solidity into other types of bytecode (e.g., WASM) that would run natively on your smart contract platform, yet the resulting integration will need to be tested extensively. So if your smart contract platform runs Solidity contracts, you are good.\nIf it does not, the protocol will have to be implemented in the native smart contract language.")]),t._v(" "),o("p",[t._v("If your platform is not directly compatible, this means that a significant amount of development will need to be undertaken to port Airnode on your chain. To learn more about how we can help, contact us at contact@api3.org. The following list details some reasons to carry through with this.")]),t._v(" "),o("ul",[o("li",[t._v("Airnode and its protocol are designed to enable standardized and set-and-forget oracle nodes. Its value-add comes from its design philosophy as much as its implementation.")]),t._v(" "),o("li",[t._v("The integration effort will only cover the parts of Airnode that interact with the chain. The part that interacts with APIs does not need to be modified at all, and that constitutes roughly 50% of the node.")]),t._v(" "),o("li",[t._v("Porting Airnode to your chain will make the existing APIâ€“oracle integrations made for Airnode available to your chain. Therefore, you would not only be porting a piece of software, but all the APIs that will be made available as a result.")])]),t._v(" "),o("h2",{attrs:{id:"ethereum-json-rpc-api-compatibility"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ethereum-json-rpc-api-compatibility"}},[t._v("#")]),t._v(" Ethereum JSON-RPC API Compatibility")]),t._v(" "),o("p",[t._v("The Airnode application part of Airnode uses "),o("code",[t._v("ethers.js")]),t._v(" to interact with the blockchain, which expects to communicate with an Ethereum JSON-RPC API-compatible endpoint.")]),t._v(" "),o("p",[t._v("Typically, chains that do not support EVM will also not be compatible in this regard.\nHowever, EVM support does not guarantee blockchain node API compatibility. You can compare your blockchain node API with the "),o("a",{attrs:{href:"https://eth.wiki/json-rpc/API",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Ethereum JSON-RPC API"),o("OutboundLink")],1),t._v(" to see if it is any different.")]),t._v(" "),o("p",[t._v("The most obvious sign of a chain supporting the required API functionality is it being compatible with Metamask. This is because Metamask has similar requirements as Airnode. On the other hand, if your smart contract platform requires customized versions of "),o("em",[t._v("web3.js, ethers.js, truffle, etc.")]),t._v(" being used, that is probably because the blockchain node API is not identical to Ethereum's.")]),t._v(" "),o("h2",{attrs:{id:"http-vs-wss"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#http-vs-wss"}},[t._v("#")]),t._v(" HTTP vs WSS")]),t._v(" "),o("p",[t._v("The Airnode application uses the HTTP endpoint to access the JSON-RPC API. Therefore, not supporting WSS endpoints/not having them widely available is not a problem. So if your users can use Metamask to interact with your smart contract platform, you are good. Otherwise, the parts of Airnode application that interacts with the chain will need to be customized.")]),t._v(" "),o("h2",{attrs:{id:"next-steps"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#next-steps"}},[t._v("#")]),t._v(" Next Steps")]),t._v(" "),o("p",[t._v("Assuming you have determined that your smart contract platform can support Airnode, you can attempt the integration yourself by following the steps below. Do not hesitate to drop by "),o("a",{attrs:{href:"https://discord.gg/qnRrcfnm5W",target:"_blank",rel:"noopener noreferrer"}},[t._v("our Discord"),o("OutboundLink")],1),t._v(" and ask for support.")]),t._v(" "),o("h3",{attrs:{id:"part-1-protocol-contract-deployment"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#part-1-protocol-contract-deployment"}},[t._v("#")]),t._v(" Part 1: Protocol contract deployment")]),t._v(" "),o("p",[o("em",[t._v("Replace parts starting with "),o("code",[t._v("$")])])]),t._v(" "),o("ol",[o("li",[t._v("Clone the "),o("a",{attrs:{href:"https://github.com/api3dao/airnode",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airnode monorepo"),o("OutboundLink")],1),t._v(" (use the "),o("code",[t._v("0.1.0")]),t._v(" branch).")])]),t._v(" "),o("div",{staticClass:"language-sh line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-sh"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --single-branch --branch "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(".0 https://github.com/api3dao/airnode.git\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br")])]),o("ol",{attrs:{start:"2"}},[o("li",[t._v("Install its dependencies and build it")])]),t._v(" "),o("div",{staticClass:"language-sh line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-sh"}},[o("code",[o("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" airnode\n"),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" run bootstrap\n"),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" run build\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br"),o("span",{staticClass:"line-number"},[t._v("2")]),o("br"),o("span",{staticClass:"line-number"},[t._v("3")]),o("br")])]),o("ol",{attrs:{start:"3"}},[o("li",[t._v("Go to the "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/tree/pre-alpha/packages/protocol",target:"_blank",rel:"noopener noreferrer"}},[t._v("protocol package"),o("OutboundLink")],1)])]),t._v(" "),o("div",{staticClass:"language-sh line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-sh"}},[o("code",[o("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" packages/protocol\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br")])]),o("ol",{attrs:{start:"4"}},[o("li",[t._v("Create a "),o("code",[t._v("credentials.json")]),t._v(" file, similar to "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/pre-alpha/packages/protocol/credentials.example.json",target:"_blank",rel:"noopener noreferrer"}},[t._v("credentials.example.json"),o("OutboundLink")],1)])]),t._v(" "),o("div",{staticClass:"language-sh line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-sh"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" credentials.example.json credentials.json\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br")])]),o("ol",{attrs:{start:"5"}},[o("li",[t._v("Add the following entry to "),o("code",[t._v("credentials.json")])])]),t._v(" "),o("div",{staticClass:"language-json line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[o("span",{pre:!0,attrs:{class:"token property"}},[t._v('"$CHAIN_NAME"')]),t._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),o("span",{pre:!0,attrs:{class:"token property"}},[t._v('"mnemonic"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$MNEMONIC"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),o("span",{pre:!0,attrs:{class:"token property"}},[t._v('"providerUrl"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$PROVIDER_URL"')]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br"),o("span",{staticClass:"line-number"},[t._v("2")]),o("br"),o("span",{staticClass:"line-number"},[t._v("3")]),o("br"),o("span",{staticClass:"line-number"},[t._v("4")]),o("br")])]),o("p",[o("code",[t._v("$CHAIN_NAME")]),t._v(" is the name that will be used to refer to your chain.")]),t._v(" "),o("p",[o("code",[t._v("$MNEMONIC")]),t._v(" is the mnemonic of the wallet that you will use to deploy the protocol contracts.\nMake sure that it is funded (if applicable).")]),t._v(" "),o("p",[o("code",[t._v("$PROVIDER_URL")]),t._v(" is the URL of the node JSON-RPC API you will use to deploy the protocol contracts.")]),t._v(" "),o("ol",{attrs:{start:"6"}},[o("li",[t._v("Add the following entry to "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/pre-alpha/packages/protocol/hardhat.config.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("hardhat.config.js"),o("OutboundLink")],1)])]),t._v(" "),o("div",{staticClass:"language-js line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-js"}},[o("code",[t._v("$"),o("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CHAIN_NAME")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      url"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" credentials"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),o("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CHAIN_NAME")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("providerUrl "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      accounts"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mnemonic"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" credentials"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),o("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CHAIN_NAME")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mnemonic "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br"),o("span",{staticClass:"line-number"},[t._v("2")]),o("br"),o("span",{staticClass:"line-number"},[t._v("3")]),o("br"),o("span",{staticClass:"line-number"},[t._v("4")]),o("br")])]),o("ol",{attrs:{start:"7"}},[o("li",[t._v("Add the following script to "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/pre-alpha/packages/protocol/package.json",target:"_blank",rel:"noopener noreferrer"}},[t._v("package.json"),o("OutboundLink")],1)])]),t._v(" "),o("div",{staticClass:"language-json line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[o("span",{pre:!0,attrs:{class:"token property"}},[t._v('"deploy:$CHAIN_NAME"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hardhat deploy --network $CHAIN_NAME"')]),t._v("\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br")])]),o("ol",{attrs:{start:"8"}},[o("li",[t._v("Finally, run the added script to deploy the contracts, which will record the deployment details including the contract address in the "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/tree/pre-alpha/packages/protocol/deployments",target:"_blank",rel:"noopener noreferrer"}},[o("code",[t._v("/deployments")]),o("OutboundLink")],1),t._v(" directory.")])]),t._v(" "),o("div",{staticClass:"language-sh line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-sh"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" run deploy:"),o("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CHAIN_NAME")]),t._v("\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br")])]),o("p",[t._v("If your chain has a customized flow for deploying contracts, you can find the bytecodes of the compiled contracts in the "),o("code",[t._v("artifacts/")]),t._v(" directory.")]),t._v(" "),o("p",[t._v("Note that you will need to deploy both "),o("RouterLink",{attrs:{to:"/next/technology/protocols/request-response/general-structure.html#airnoderrp-sol"}},[t._v("AirnodeRrp.sol")]),t._v(" and "),o("RouterLink",{attrs:{to:"/next/technology/protocols/request-response/general-structure.html#convenience-sol"}},[t._v("Convenience.sol")]),t._v(".")],1),t._v(" "),o("h3",{attrs:{id:"part-2-make-a-test-call"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#part-2-make-a-test-call"}},[t._v("#")]),t._v(" Part 2: Make a test call")]),t._v(" "),o("p",[t._v("After completing Part 1, you must have two contract addresses, one for "),o("code",[t._v("AirnodeRrp.sol")]),t._v(" and one for "),o("code",[t._v("Convenience.sol")]),t._v(".\nNow follow the steps below to make a test call:")]),t._v(" "),o("ol",[o("li",[t._v("Clone the "),o("a",{attrs:{href:"https://github.com/api3dao/airnode-starter/tree/pre-alpha",target:"_blank",rel:"noopener noreferrer"}},[t._v("airnode-starter"),o("OutboundLink")],1),t._v(" repo")])]),t._v(" "),o("div",{staticClass:"language-sh line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-sh"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --single-branch --branch "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(".0 https://github.com/api3dao/airnode-starter.git\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br")])]),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[t._v("Open the "),o("a",{attrs:{href:"https://github.com/api3dao/airnode-starter/blob/pre-alpha/config/config.example.json",target:"_blank",rel:"noopener noreferrer"}},[t._v("config.example.json"),o("OutboundLink")],1),t._v(" file in "),o("code",[t._v("config/")]),t._v(".\nReplace the following values:")]),t._v(" "),o("ul",[o("li",[o("code",[t._v("nodeSettings.chains.0.id")]),t._v(": "),o("code",[t._v("3")]),t._v(" -> The ID of your chain")]),t._v(" "),o("li",[o("code",[t._v("nodeSettings.chains.contracts.Airnode")]),t._v(": "),o("code",[t._v("0xF8d32C3e53F7DA6e7CB82323f2cAB2159776b832")]),t._v(" -> The address of the "),o("code",[t._v("AirnodeRRP.sol")]),t._v(" contract you have deployed")]),t._v(" "),o("li",[o("code",[t._v("nodeSettings.chains.contracts.Convenience")]),t._v(": "),o("code",[t._v("0x1552cF617711D6Da04E0EDC9e5C26eBbA08625ac")]),t._v(" -> The address of the "),o("code",[t._v("Convenience.sol")]),t._v(" contract you have deployed")])])]),t._v(" "),o("li",[o("p",[t._v("Follow the "),o("a",{attrs:{href:"https://github.com/api3dao/airnode-starter/tree/pre-alpha#setup#setup",target:"_blank",rel:"noopener noreferrer"}},[t._v("instructions"),o("OutboundLink")],1),t._v(" (both Step 1 and 2). Note that you can use the "),o("code",[t._v("$MNEMONIC")]),t._v(" and the "),o("code",[t._v("$PROVIDER_URL")]),t._v(" you have used while deploying the contracts in your "),o("code",[t._v(".env")]),t._v(" file.")])])]),t._v(" "),o("p",[t._v("The final step of the instructions is to run the "),o("code",[t._v("make-request")]),t._v(" script, which will make a request on your chain for the Airnode to fulfill it. This example project working as intended is a very good indicator that the integration has succeeded. After doing this, you are recommended to take a deep dive into more of these docs to learn more about Airnode.")])],1)}),[],!1,null,null,null);e.default=s.exports}}]);